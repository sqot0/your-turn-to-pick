---
import Layout from '../layouts/Layout.astro';
import { getRandomMatch } from '@api/index';
import { Image } from 'astro:assets';

const match = await getRandomMatch();

const hiddenHero = Math.random() > 0.5 ? match.direHeroes[match.direHeroes.length - 1] : match.radiantHeroes[match.radiantHeroes.length - 1];
---

<Layout title="Your Turn To Pick">
  <header>
    <div class="inputContainer">
    	<input class="input" type="text" placeholder="Write a name of lastpick hero" />
		<svg class="inputImg" xmlns="http://www.w3.org/2000/svg" height="30" width="30" viewBox="0 0 512 512"><path fill="#ffffff" d="M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9 0 208S93.1 0 208 0S416 93.1 416 208zM208 352a144 144 0 1 0 0-288 144 144 0 1 0 0 288z"/></svg>
	</div>
    <a class="githubLink" target="_blank" href="https://github.com/sqot0/your-turn-to-pick">
      <Image src="/github.png" alt="GitHub" width="60" height="60" />
    </a>
  </header>
  
  <main>
    <p style="color: var(--background)">{match.matchId}</p>
    
    <div class="mainContainer">
      <p id="matchDuration" class="duration hidden">??:??</p>
      <div class="scoreContainer">
        <p id="radiantScore" class="radiantScore">??</p>
        <Image class="rankImg" src={`/ranks/${match.rankAvg}.png`} alt={`${match.rankAvg}`} width="127" height="127" />
        <p id="direScore" class="direScore">??</p>
      </div>

      <div class="teamsContainer">
        <div class="team">
          <p class="winTextRadiant">Radiant Win!</p>
          <div class="heroesContainer">
            {match.radiantHeroes.map((hero) => {
              const isHiddenHero = hero.localized_name === hiddenHero.localized_name;
              return (
                <div class="heroContainer">
                  <Image
                    id={isHiddenHero ? 'hiddenHeroImg' : undefined}
                    class="heroImg"
                    src={isHiddenHero ? '/unknown.png' : `https://cdn.cloudflare.steamstatic.com${hero.img}`}
                    width="128"
                    height="72"
                    alt={isHiddenHero ? '???' : hero.localized_name}
                  />
                  <p id={isHiddenHero ? 'hiddenHeroName' : undefined} class="heroName">
                    {isHiddenHero ? '???' : hero.localized_name}
                  </p>
                </div>
              );
            })}
          </div>
        </div>

        <div class="team">
          <p class="winTextDire">Dire Win!</p>
          <div class="heroesContainer" style="flex-direction: row-reverse;">
            {match.direHeroes.map(hero  => {
				const isHiddenHero = hero.localized_name === hiddenHero.localized_name;
				return (
				  <div class="heroContainer">
					<Image
					  id={isHiddenHero ? 'hiddenHeroImg' : undefined}
					  class="heroImg"
					  src={isHiddenHero ? '/unknown.png' : `https://cdn.cloudflare.steamstatic.com${hero.img}`}
					  width="128"
					  height="72"
					  alt={isHiddenHero ? '???' : hero.localized_name}
					/>
					<p id={isHiddenHero ? 'hiddenHeroName' : undefined} class="heroName">
					  {isHiddenHero ? '???' : hero.localized_name}
					</p>
				  </div>
				);
			})}
          </div>
        </div>
      </div>

      <p class="bannedText">Banned</p>
      <div class="heroesContainer" style="margin-bottom: 20px;">
        {match.bannedHeroes.map(hero => (
          <div class="heroContainer">
            <Image class="heroImgBanned" src={`https://cdn.cloudflare.steamstatic.com${hero.img}`} width="128" height="72" alt={`${hero.localized_name}`} />
            <p class="heroName">{hero.localized_name}</p>
          </div>
        ))}
      </div>
    </div>
</main>
</Layout>

<script define:vars={{ hiddenHero, match }}>
  let showHiddenInfo = false;

  document.querySelector('.inputImg').addEventListener('click', () => {
    const userInput = document.querySelector('.input').value.trim().toLowerCase();
    
    if (userInput === hiddenHero.localized_name.toLowerCase()) {
      showHiddenInfo = true;
      updateUI();
    } else {
      alert('Incorrect guess! Try again.');
	  document.querySelector('.input').value = '';
    }
  });

  function updateUI() {
    if (showHiddenInfo) {
      document.querySelector('.duration.hidden').textContent = `${Math.floor(match.duration / 60)}:${String(match.duration % 60).padStart(2, '0')}`;
      document.getElementById('radiantScore').textContent = match.radiantScore;
      document.getElementById('direScore').textContent = match.direScore;
	  match.radiantWin ? document.querySelector('.winTextRadiant').style.opacity = 1 : document.querySelector('.winTextDire').style.opacity = 1;
	  document.getElementById('hiddenHeroImg').src = `https://cdn.cloudflare.steamstatic.com${hiddenHero.img}`;
	  document.getElementById('hiddenHeroName').textContent = hiddenHero.localized_name;
    }
  }
</script>

<style>
	header {
		width: 95%;
		position: absolute;
		top: 0;
		display: flex;
		justify-content: center;
		align-items: center;
		margin-left: 2.5%;
		margin-top: 10px;

		@media screen and (max-width: 600px) {
			width: 100%;
			margin-left: 0;
			justify-content: space-between;
		}
	}

	.inputContainer {
		width: 500px;
		height: 60px;	

		display: flex;
		justify-content: center;
		align-items: center;

		@media screen and (max-width: 500px) {
			width: 90%;
		}
	}

	.input {
		width: 70%;
		height: 100%;
		border: 0px
		color: var(--white);
		border: 2px solid var(--white);
		border-radius: 28px;

		text-align: left;
		padding-left: 10px;
		font-size: 24px;
		margin-right: 2px;
	}

	.inputImg {
		cursor: pointer;
		padding: 10px;
	}

	.githubLink {
		position: absolute;
		cursor: pointer;
		right: 0;
		margin-left: 20px;

		@media screen and (max-width: 600px) {
			position: relative;
		}
	}

	main {
		width: 100%;
		min-height: 100vh;
		display: flex;
		align-items: center;
		justify-content: center;
		flex-direction: column;

		@media screen and (max-width: 1000px) {
			padding-top: 80px;
		}

		@media screen and (max-width: 668px) {
			padding-top: 120px;
		}
	}

	.mainContainer {
		width: 90%;
		height: auto;
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 20px;
		flex-direction: column;
	}

	.duration {
		font-weight: 800;
		font-size: 80px;

		color: var(--white);
	}

	.scoreContainer {
		display: flex;
		justify-content: center;
		align-items: center;
		gap: 30px;

		@media screen and (max-width: 400px) {
			gap: 0px
		}
	}

	.radiantScore {
		width: 105px;
		font-weight: 800;
		font-size: 80px;

		color: var(--green);

		text-shadow: 0px 0px 20px var(--green);
	}

	.direScore {
		width: 105px;
		font-weight: 800;
		font-size: 80px;

		color: var(--red);

		text-shadow: 0px 0px 20px var(--red);
	}

	.rankImg {
		margin-top: 40px;
	}

	.teamsContainer {
		width: 100%;
		display: flex;
		justify-content: space-between;
		align-items: center;
	}

	.team {
		width: auto;
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
		gap: 10px;
	}

	.winTextRadiant {
		font-weight: 800;
		font-size: 40px;

		color: var(--green);

		text-shadow: 0px 0px 20px var(--green);

		opacity: 0;
	}

	.winTextDire {
		font-weight: 800;
		font-size: 40px;

		color: var(--red);

		text-shadow: 0px 0px 20px var(--red);

		opacity: 0;
	}

	.heroesContainer {
		width: auto;
		display: flex;
		justify-content: center;
		align-items: center;
		gap: 20px;

		flex-wrap: wrap;
	}

	.heroContainer {
		display: flex;
		justify-content: center;
		flex-direction: column;
		align-items: center;
		gap: 20px
	}

	.heroImg {
		border: 1px solid #BEBEBE;
		border-radius: 20px;
	}

	.heroName {
		font-weight: 400;
		font-size: 20px;
		color: var(--white);
	}

	.bannedText {
		margin-top: 40px;

		font-weight: 800;
		font-size: 40px;

		color: var(--white);
	}

	.heroImgBanned {
		border: 1px solid #BEBEBE;
		border-radius: 20px;

		filter: grayscale(100%);
	}
</style>